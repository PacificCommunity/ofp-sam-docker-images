name: Build and Push Docker Images to GHCR (Auto Versioning)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Specify a custom version (e.g., 1.5). Leave empty for auto-increment."
        required: false
        default: ""

  push:
    branches:
      - main
    paths:
      - "**/**"

permissions:
  contents: read
  packages: write

jobs:
  ##################################################################
  # 1) DETECT CHANGES
  ##################################################################
  detect-changes:
    runs-on: ubuntu-latest

    # Job-level output: changed_dirs -> Steps => id: detect => outputs.changed_dirs
    outputs:
      changed_dirs: ${{ steps.detect.outputs.changed_dirs }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Ensures we have at least one previous commit

      - name: Detect Changed Directories
        id: detect
        run: |
          # 1) Check if there's a previous commit
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            CHANGED_DIRS=$(git diff --name-only HEAD^ HEAD -- | awk -F/ '{print $1}' | sort -u | uniq | grep -v '^\.' || true)
          else
            # 2) If first commit, consider all existing top-level directories
            CHANGED_DIRS=$(ls -d */ | cut -f1 -d'/' | grep -v '^\.' || true)
          fi

          echo "Detected changed directories: $CHANGED_DIRS"

          # 3) Convert to JSON array (avoid empty string)
          if [[ -z "$CHANGED_DIRS" ]]; then
            CHANGED_JSON="[]"
          else
            CHANGED_JSON=$(echo "$CHANGED_DIRS" | jq -R -s -c 'split("\n") | map(select(. != ""))')
          fi
          echo "Final JSON of changed directories: $CHANGED_JSON"

          # 4) Store in step output using GITHUB_OUTPUT
          #    steps.detect.outputs.changed_dirs -> job outputs.changed_dirs
          echo "changed_dirs=$CHANGED_JSON" >> "$GITHUB_OUTPUT"

  ##################################################################
  # 2) DETERMINE VERSION PER DIRECTORY
  ##################################################################
  determine-version:
    needs: detect-changes
    # If no changed dirs => skip
    if: needs.detect-changes.outputs.changed_dirs != '[]'
    runs-on: ubuntu-latest

    # Convert the JSON array (changed_dirs) into a matrix
    strategy:
      matrix:
        directory: ${{ fromJson(needs.detect-changes.outputs.changed_dirs) }}

    # Make a job-level output for the version, if you need to pass to other jobs
    outputs:
      new_version: ${{ steps.determine.outputs.new_version }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Determine Version
        id: determine
        run: |
          dir="${{ matrix.directory }}"
          PACKAGE_URL="https://api.github.com/orgs/pacificcommunity/packages/container/$dir/versions"

          echo "Processing directory: $dir"
          echo "Fetching GHCR versions from: $PACKAGE_URL"

          API_RESPONSE=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$PACKAGE_URL")

          echo "GHCR API Response: $API_RESPONSE"

          # 1) If package not found => start at 1.0
          if echo "$API_RESPONSE" | grep -q '"message": "Package not found."'; then
            NEW_VERSION="1.0"
          else
            # 2) Check if response is an array
            IS_ARRAY=$(echo "$API_RESPONSE" | jq -r 'type' 2>/dev/null || true)
            if [[ "$IS_ARRAY" != "array" ]]; then
              echo "GHCR response not array. Start version at 1.0"
              NEW_VERSION="1.0"
            else
              # 3) Extract valid version tags (X.Y) and find the latest
              VERSION_TAGS=$(echo "$API_RESPONSE" | jq -r '
                [.[].metadata.container.tags? // [] | .[]]
                | map(select(test("^[0-9]+\\.[0-9]+$") and . != "latest"))
                | sort
                | last
              ')

              if [[ -z "$VERSION_TAGS" || "$VERSION_TAGS" == "null" ]]; then
                NEW_VERSION="1.0"
              else
                CLEAN_VERSION=$(echo "$VERSION_TAGS" | sed 's/^v//')
                NEW_VERSION=$(awk -F. '{print $1 "." $2+1}' <<< "$CLEAN_VERSION")
                echo "Latest version detected: $CLEAN_VERSION => $NEW_VERSION"
              fi
            fi
          fi

          echo "Final version for $dir => $NEW_VERSION"

          # Save as step output
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

  ##################################################################
  # 3) BUILD DOCKER IMAGES
  ##################################################################
  build:
    needs: determine-version
    if: needs.detect-changes.outputs.changed_dirs != '[]'
    runs-on: ubuntu-latest

    # Reuse the same matrix of changed dirs
    strategy:
      matrix:
        directory: ${{ fromJson(needs.detect-changes.outputs.changed_dirs) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          dir="${{ matrix.directory }}"
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/$dir"

          # If you need the version => read from job output?
          VERSION="${{ needs.determine-version.outputs.new_version }}"

          echo "Building Docker image: $IMAGE_NAME:v$VERSION"
          docker build -t "$IMAGE_NAME:v$VERSION" -t "$IMAGE_NAME:latest" "$dir/"

  ##################################################################
  # 4) PUSH DOCKER IMAGES
  ##################################################################
  push:
    needs: build
    if: needs.detect-changes.outputs.changed_dirs != '[]'
    runs-on: ubuntu-latest

    # Reuse the same matrix
    strategy:
      matrix:
        directory: ${{ fromJson(needs.detect-changes.outputs.changed_dirs) }}

    steps:
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push Docker Image
        run: |
          dir="${{ matrix.directory }}"
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/$dir"
          VERSION="${{ needs.determine-version.outputs.new_version }}"

          echo "Pushing Docker image: $IMAGE_NAME:v$VERSION"
          docker push "$IMAGE_NAME:v$VERSION"
          docker push "$IMAGE_NAME:latest"
