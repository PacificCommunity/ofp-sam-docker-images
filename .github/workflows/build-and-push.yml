name: Build and Push Docker Images to GHCR (Auto Versioning)

on:
  push:
    branches:
      - main
    paths:
      - '**/**'  # Detect any file changes

permissions:
  contents: read
  packages: write

jobs:
  ##################################################################
  # JOB A) DETECT CHANGES
  ##################################################################
  detect-changes:
    runs-on: ubuntu-latest

    # We define one output: "changed_dirs"
    outputs:
      changed_dirs: ${{ steps.detect.outputs.changed_dirs }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          # Ensures we have a previous commit if it exists
          fetch-depth: 2

      - name: Detect Changed Directories
        id: detect
        shell: bash
        run: |
          echo "=== [Detect Step] Checking for changed directories ==="

          # 1) Check if there's a previous commit
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            # Extract top-level directories from changed files
            CHANGED_DIRS=$(git diff --name-only HEAD^ HEAD -- | awk -F/ '{print $1}' | sort -u | grep -v '^\.' || true)
          else
            # If first commit, consider all existing top-level directories
            CHANGED_DIRS=$(ls -d */ | cut -f1 -d'/' | grep -v '^\.' || true)
          fi

          echo "=== Raw changed directories: $CHANGED_DIRS ==="

          # 2) Convert to JSON array
          if [[ -z "$CHANGED_DIRS" ]]; then
            CHANGED_JSON="[]"
          else
            CHANGED_JSON=$(echo "$CHANGED_DIRS" | jq -R -s -c 'split("\n") | map(select(. != ""))')
          fi

          echo "=== JSON array of changed directories: $CHANGED_JSON ==="

          # 3) Save to job output
          echo "changed_dirs=$CHANGED_JSON" >> "$GITHUB_OUTPUT"
          echo "=== [Detect Step] Done. ==="

  ##################################################################
  # JOB B) BUILD & PUSH
  ##################################################################
  build:
    # This job depends on the detect-changes job
    needs: detect-changes

    # Skip if changed_dirs == '[]'
    if: needs.detect-changes.outputs.changed_dirs != '[]'
    runs-on: ubuntu-latest

    # Create a matrix from fromJson(...) of changed_dirs
    strategy:
      matrix:
        directory: ${{ fromJson(needs.detect-changes.outputs.changed_dirs) }}

    steps:
      - name: Debug changed_dirs
        shell: bash
        run: |
          echo "=== [Debug Step] Checking what's in changed_dirs ==="
          echo "Raw changed_dirs from detect-changes: '${{ needs.detect-changes.outputs.changed_dirs }}'"
          echo "=== If this is empty or '', that caused fromJson error ==="

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build & Push Docker Image
        shell: bash
        run: |
          dir="${{ matrix.directory }}"
          echo "=== [Build Step] Processing directory: $dir ==="

          # 1) Determine GHCR version
          PACKAGE_URL="https://api.github.com/orgs/pacificcommunity/packages/container/$dir/versions"
          echo "Fetching GHCR versions from: $PACKAGE_URL"

          API_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
                             -H "Accept: application/vnd.github.v3+json" \
                             "$PACKAGE_URL")

          echo "GHCR API Response: $API_RESPONSE"

          if echo "$API_RESPONSE" | grep -q '"message": "Package not found."'; then
            NEW_VERSION="1.0"
          else
            IS_ARRAY=$(echo "$API_RESPONSE" | jq -r 'type' 2>/dev/null || true)
            if [[ "$IS_ARRAY" != "array" ]]; then
              echo "Response is not an array. Starting at 1.0"
              NEW_VERSION="1.0"
            else
              VERSION_TAGS=$(echo "$API_RESPONSE" | jq -r '
                [.[].metadata.container.tags? // [] | .[]]
                | map(select(test("^[0-9]+\\.[0-9]+$") and . != "latest"))
                | sort
                | last
              ')
              if [[ -z "$VERSION_TAGS" || "$VERSION_TAGS" == "null" ]]; then
                NEW_VERSION="1.0"
              else
                CLEAN_VERSION=$(echo "$VERSION_TAGS" | sed 's/^v//')
                NEW_VERSION=$(awk -F. '{print $1 "." $2+1}' <<< "$CLEAN_VERSION")
                echo "Latest version: $CLEAN_VERSION → Next: $NEW_VERSION"
              fi
            fi
          fi

          echo "=== Final version for $dir => $NEW_VERSION ==="

          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/$dir"

          # 2) Log into GHCR (in this step for demonstration—can be separate)
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # 3) Build
          echo "=== Building Docker Image: $IMAGE_NAME:v$NEW_VERSION ==="
          docker build -t "$IMAGE_NAME:v$NEW_VERSION" -t "$IMAGE_NAME:latest" "$dir/"

          # 4) Push
          echo "=== Pushing Docker Image: $IMAGE_NAME:v$NEW_VERSION ==="
          docker push "$IMAGE_NAME:v$NEW_VERSION"
          docker push "$IMAGE_NAME:latest"
          echo "=== [Build Step] Done for directory: $dir ==="
