name: Build and Push Docker Images to GHCR

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Specify a custom version (e.g., 1.5). Leave empty for auto-increment."
        required: false
        default: ""

  push:
    branches:
      - main
    paths:
      - "**/**"  # Detects any changed paths

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Convert Repository Owner to Lowercase
        run: echo "OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Detect Changed Directories
        id: detect_dirs
        run: |
          # Extract top-level directories from changed files (excluding hidden/system files)
          CHANGED_DIRS=$(git diff --name-only HEAD^ HEAD | awk -F/ '{print $1}' | sort -u | uniq | grep -v '^\.' || true)

          # Debug output
          echo "Changed directories: $CHANGED_DIRS"

          # Store as GitHub environment variable
          echo "CHANGED_DIRS=$(echo $CHANGED_DIRS | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Docker Images
        run: |
          for dir in ${{ env.CHANGED_DIRS }}; do
            if [[ ! -d "$dir" ]]; then
              echo "Skipping non-directory: $dir"
              continue
            fi

            IMAGE_NAME=ghcr.io/${{ env.OWNER }}/$dir
            echo "Processing directory: $dir"

            # Query GHCR for existing versions
            PACKAGE_URL="https://api.github.com/orgs/pacificcommunity/packages/container/$dir/versions"
            API_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                $PACKAGE_URL)

            # Extract valid version tags
            VERSION_TAGS=$(echo "$API_RESPONSE" | jq -r '[.[].metadata.container.tags? // [] | .[]] | map(select(test("^v?[0-9]+\\.[0-9]+$") and . != "latest")) | sort | last')

            # If no valid version is found, start at 1.0
            if [[ -z "$VERSION_TAGS" || "$VERSION_TAGS" == "null" ]]; then
              NEW_VERSION="1.0"
            else
              CLEAN_VERSION=$(echo "$VERSION_TAGS" | sed 's/^v//')
              NEW_VERSION=$(awk -F. '{print $1 "." $2+1}' <<< "$CLEAN_VERSION")
            fi

            echo "Latest version detected: $VERSION_TAGS, Incrementing to: v$NEW_VERSION"
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

            # Build Docker Image
            echo "Building Docker image: v${NEW_VERSION}"
            docker build -t $IMAGE_NAME:v${NEW_VERSION} -t $IMAGE_NAME:latest $dir/

            # Push Docker Image
            echo "Pushing Docker image: $IMAGE_NAME"
            docker push $IMAGE_NAME:v${NEW_VERSION}
            docker push $IMAGE_NAME:latest
          done
