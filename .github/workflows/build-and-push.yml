name: Build and Push Docker Images to GHCR (User-Specified or Auto-Increment Version)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Specify a custom version (e.g., 1.5). Leave empty for auto-increment."
        required: false
        default: ""

  push:
    branches:
      - main
    paths:
      - "skj-2025/**"

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Convert Repository Owner to Lowercase
        run: echo "OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Determine Version
        id: get_version
        run: |
          # Define the GHCR API URL
          PACKAGE_URL="https://api.github.com/orgs/pacificcommunity/packages/container/skj-2025/versions"
          echo "Fetching GHCR versions from: $PACKAGE_URL"

          # Fetch all versions from GHCR
          API_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              $PACKAGE_URL)

          # Debugging: Print API response
          echo "GHCR API Response: $API_RESPONSE"

          # Extract valid version tags while filtering out empty arrays and 'latest'
          VERSION_TAGS=$(echo "$API_RESPONSE" | jq -r '[.[].metadata.container.tags? // [] | .[]] | map(select(test("^v?[0-9]+\\.[0-9]+$") and . != "latest")) | sort | last')

          # Debugging: Print extracted version tags
          echo "Extracted version tags: $VERSION_TAGS"

          # If no valid version is found, start at 1.0
          if [[ -z "$VERSION_TAGS" || "$VERSION_TAGS" == "null" ]]; then
            echo "No valid versions found. Setting initial version to 1.0"
            NEW_VERSION="1.0"
          else
            # Remove 'v' prefix if present (e.g., "v1.0" → "1.0")
            CLEAN_VERSION=$(echo "$VERSION_TAGS" | sed 's/^v//')

            # Increment minor version (e.g., 1.0 → 1.1)
            NEW_VERSION=$(awk -F. '{print $1 "." $2+1}' <<< "$CLEAN_VERSION")
            echo "Latest version detected: $CLEAN_VERSION. Incrementing to: $NEW_VERSION"
          fi

          # Save version to GitHub environment
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Final version to be used: $NEW_VERSION"
          
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=ghcr.io/${{ env.OWNER }}/skj-2025
          echo "Building Docker image with version: v${{ env.NEW_VERSION }}"

          # Docker Build & Push
          docker build -t $IMAGE_NAME:v${{ env.NEW_VERSION }} -t $IMAGE_NAME:latest skj-2025/
          docker push $IMAGE_NAME:v${{ env.NEW_VERSION }}
          docker push $IMAGE_NAME:latest

