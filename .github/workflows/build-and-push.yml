name: Build and Push Docker Images to GHCR (Auto Versioning)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Specify a custom version (e.g., 1.5). Leave empty for auto-increment."
        required: false
        default: ""

  push:
    branches:
      - main
    paths:
      - "**/**"  # Detects any changed paths

permissions:
  contents: read
  packages: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_dirs: ${{ steps.detect.outputs.changed_dirs }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Ensures at least one previous commit is available

      - name: Detect Changed Directories
        id: detect
        run: |
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            CHANGED_DIRS=$(git diff --name-only HEAD^ HEAD -- | awk -F/ '{print $1}' | sort -u | uniq | grep -v '^\.' || true)
          else
            CHANGED_DIRS=$(ls -d */ | cut -f1 -d'/' | grep -v '^\.' || true)
          fi

          echo "Detected changed directories: $CHANGED_DIRS"

          if [[ -z "$CHANGED_DIRS" ]]; then
            CHANGED_JSON="[]"
          else
            CHANGED_JSON=$(echo "$CHANGED_DIRS" | jq -R -s -c 'split("\n") | map(select(. != ""))')
          fi

          echo "CHANGED_DIRS=$CHANGED_JSON" >> $GITHUB_ENV

  determine-version:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_dirs != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ${{ fromJson(needs.detect-changes.outputs.changed_dirs) }}
    outputs:
      versions: ${{ steps.get_version.outputs.new_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Determine Version
        id: get_version
        run: |
          dir="${{ matrix.directory }}"
          PACKAGE_URL="https://api.github.com/orgs/pacificcommunity/packages/container/$dir/versions"

          echo "Fetching GHCR versions from: $PACKAGE_URL"

          API_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              $PACKAGE_URL)

          echo "GHCR API Response: $API_RESPONSE"

          if echo "$API_RESPONSE" | grep -q "Not Found"; then
            NEW_VERSION="1.0"
          else
            VERSION_TAGS=$(echo "$API_RESPONSE" | jq -r '[.[].metadata.container.tags? // [] | .[]] | map(select(test("^[0-9]+\\.[0-9]+$") and . != "latest")) | sort | last')

            if [[ -z "$VERSION_TAGS" || "$VERSION_TAGS" == "null" ]]; then
              NEW_VERSION="1.0"
            else
              CLEAN_VERSION=$(echo "$VERSION_TAGS" | sed 's/^v//')
              NEW_VERSION=$(awk -F. '{print $1 "." $2+1}' <<< "$CLEAN_VERSION")
              echo "Latest version detected: $CLEAN_VERSION. Incrementing to: $NEW_VERSION"
            fi
          fi

          echo "NEW_VERSION=\"$NEW_VERSION\"" >> $GITHUB_ENV

  build:
    needs: determine-version
    if: needs.detect-changes.outputs.changed_dirs != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ${{ fromJson(needs.detect-changes.outputs.changed_dirs) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          dir="${{ matrix.directory }}"
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/$dir
          VERSION="${{ env.NEW_VERSION }}"

          echo "Building Docker image: $IMAGE_NAME:v$VERSION"
          docker build -t $IMAGE_NAME:v$VERSION -t $IMAGE_NAME:latest $dir/

  push:
    needs: build
    if: needs.detect-changes.outputs.changed_dirs != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ${{ fromJson(needs.detect-changes.outputs.changed_dirs) }}
    steps:
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push Docker Image
        run: |
          dir="${{ matrix.directory }}"
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/$dir
          VERSION="${{ env.NEW_VERSION }}"

          echo "Pushing Docker image: $IMAGE_NAME:v$VERSION"
          docker push $IMAGE_NAME:v$VERSION
          docker push $IMAGE_NAME:latest
